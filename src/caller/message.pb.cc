// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CallerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallerMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CallerMsg_Request_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CallerMsg_Response_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  CallerMsg_descriptor_ = file->message_type(0);
  static const int CallerMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallerMsg, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallerMsg, rsp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallerMsg, port_),
  };
  CallerMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CallerMsg_descriptor_,
      CallerMsg::default_instance_,
      CallerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallerMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(CallerMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallerMsg, _internal_metadata_),
      -1);
  CallerMsg_Request_descriptor_ = CallerMsg_descriptor_->enum_type(0);
  CallerMsg_Response_descriptor_ = CallerMsg_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CallerMsg_descriptor_, &CallerMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete CallerMsg::default_instance_;
  delete CallerMsg_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"\201\002\n\tCallerMsg\022\037\n\003req\030\001 \001"
    "(\0162\022.CallerMsg.Request\022 \n\003rsp\030\002 \001(\0162\023.Ca"
    "llerMsg.Response\022\014\n\004port\030\003 \001(\005\"^\n\007Reques"
    "t\022\014\n\010REQ_NONE\020\000\022\016\n\nREQ_INVITE\020\001\022\013\n\007REQ_A"
    "CK\020\002\022\013\n\007REQ_BYE\020\003\022\014\n\010REQ_INFO\020\004\022\r\n\tREQ_E"
    "RROR\020\005\"C\n\010Response\022\014\n\010RSP_NONE\020\000\022\017\n\013RSP_"
    "RINGING\020\001\022\n\n\006RSP_OK\020\002\022\014\n\010RSP_BUSY\020\003", 275);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  CallerMsg::default_instance_ = new CallerMsg();
  CallerMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* CallerMsg_Request_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallerMsg_Request_descriptor_;
}
bool CallerMsg_Request_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CallerMsg_Request CallerMsg::REQ_NONE;
const CallerMsg_Request CallerMsg::REQ_INVITE;
const CallerMsg_Request CallerMsg::REQ_ACK;
const CallerMsg_Request CallerMsg::REQ_BYE;
const CallerMsg_Request CallerMsg::REQ_INFO;
const CallerMsg_Request CallerMsg::REQ_ERROR;
const CallerMsg_Request CallerMsg::Request_MIN;
const CallerMsg_Request CallerMsg::Request_MAX;
const int CallerMsg::Request_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* CallerMsg_Response_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallerMsg_Response_descriptor_;
}
bool CallerMsg_Response_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CallerMsg_Response CallerMsg::RSP_NONE;
const CallerMsg_Response CallerMsg::RSP_RINGING;
const CallerMsg_Response CallerMsg::RSP_OK;
const CallerMsg_Response CallerMsg::RSP_BUSY;
const CallerMsg_Response CallerMsg::Response_MIN;
const CallerMsg_Response CallerMsg::Response_MAX;
const int CallerMsg::Response_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CallerMsg::kReqFieldNumber;
const int CallerMsg::kRspFieldNumber;
const int CallerMsg::kPortFieldNumber;
#endif  // !_MSC_VER

CallerMsg::CallerMsg()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CallerMsg)
}

void CallerMsg::InitAsDefaultInstance() {
}

CallerMsg::CallerMsg(const CallerMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CallerMsg)
}

void CallerMsg::SharedCtor() {
  _cached_size_ = 0;
  req_ = 0;
  rsp_ = 0;
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallerMsg::~CallerMsg() {
  // @@protoc_insertion_point(destructor:CallerMsg)
  SharedDtor();
}

void CallerMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CallerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallerMsg_descriptor_;
}

const CallerMsg& CallerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CallerMsg* CallerMsg::default_instance_ = NULL;

CallerMsg* CallerMsg::New(::google::protobuf::Arena* arena) const {
  CallerMsg* n = new CallerMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallerMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CallerMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(req_, port_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CallerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CallerMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CallerMsg.Request req = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CallerMsg_Request_IsValid(value)) {
            set_req(static_cast< ::CallerMsg_Request >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rsp;
        break;
      }

      // optional .CallerMsg.Response rsp = 2;
      case 2: {
        if (tag == 16) {
         parse_rsp:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CallerMsg_Response_IsValid(value)) {
            set_rsp(static_cast< ::CallerMsg_Response >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CallerMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CallerMsg)
  return false;
#undef DO_
}

void CallerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CallerMsg)
  // optional .CallerMsg.Request req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->req(), output);
  }

  // optional .CallerMsg.Response rsp = 2;
  if (has_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rsp(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CallerMsg)
}

::google::protobuf::uint8* CallerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CallerMsg)
  // optional .CallerMsg.Request req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->req(), target);
  }

  // optional .CallerMsg.Response rsp = 2;
  if (has_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rsp(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CallerMsg)
  return target;
}

int CallerMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional .CallerMsg.Request req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->req());
    }

    // optional .CallerMsg.Response rsp = 2;
    if (has_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rsp());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CallerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallerMsg::MergeFrom(const CallerMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      set_req(from.req());
    }
    if (from.has_rsp()) {
      set_rsp(from.rsp());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CallerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallerMsg::CopyFrom(const CallerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallerMsg::IsInitialized() const {

  return true;
}

void CallerMsg::Swap(CallerMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallerMsg::InternalSwap(CallerMsg* other) {
  std::swap(req_, other->req_);
  std::swap(rsp_, other->rsp_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallerMsg_descriptor_;
  metadata.reflection = CallerMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
